name: HabitualLife CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.11"]

  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
    - name: Install Dependecies
      run: |
        poetry install
    # Downloads a copy of the code in your repository before running CI tests
    - name: Check out repository code
      uses: actions/checkout@v4

    # Performs a clean installation of all dependencies in the `package.json` file
    # For more information, see https://docs.npmjs.com/cli/ci.html
    - name: Install dependencies
      run: npm ci

    - name: Connect to Redis
      # Runs a script that creates a Redis client, populates
      # the client with data, and retrieves data
      run: node client.js
      # Environment variable used by the `client.js` script to create a new Redis client.
      env:
        # The hostname used to communicate with the Redis service container
        REDIS_HOST: redis
        # The default Redis port
        REDIS_PORT: 6379
    - name: Run Tests
      run: |
        cd src
        poetry run python manage.py test
      env:
        ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        USE_CELERY: ${{ secrets.USE_CELERY }}
        USE_EMAIL: ${{ secrets.USE_EMAIL }}
        CELERY_BROKER_TRANSPORT_URL: ${{ secrets.CELERY_BROKER_TRANSPORT_URL }}
        CELERY_TIMEZONE: ${{ secrets.CELERY_TIMEZONE }}
        CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
